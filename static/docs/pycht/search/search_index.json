{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udfa8 Pycht","text":"<p>Pycht is a lightweight Python tool that transforms images into colorful street art-style stencils using K-Means clustering.</p> <p>It automatically reduces an image\u2019s color palette into distinct clusters and generates transparent PNG layers for each one \u2014 ideal for digital or physical stencil creation, creative coding projects, or simply exploring image segmentation.</p>"},{"location":"#features","title":"\u2728 Features","text":"<ul> <li>\ud83e\udde0 Simple image clustering using OpenCV\u2019s K-Means algorithm  </li> <li>\ud83d\uddbc\ufe0f Color separation with transparency masks  </li> <li>\ud83d\udcc1 Input/output file handling with minimal setup  </li> <li>\ud83e\uddf0 Modular architecture for easy extension</li> </ul>"},{"location":"#how-it-works","title":"\ud83d\ude80 How It Works","text":"<ol> <li>Load an image.</li> <li>Process the pixels into a 2D format.</li> <li>Cluster colors using K-Means.</li> <li>Separate each color cluster into its own transparent stencil.</li> <li>Save the final image and each stencil layer as a <code>.png</code>.</li> </ol>"},{"location":"#example-usage","title":"\ud83d\udce6 Example Usage","text":"<pre><code>from pycht import Pycht\n\n# Create a stencil with 5 color clusters\np = Pycht()\np.stencil(\"images/input.jpg\", nb_colors=5)\n</code></pre> <p>This will generate: - stencil_final.png \u2192 final clustered image - stencil_1.png, stencil_2.png, etc. \u2192 one per color cluster, with transparency</p>"},{"location":"#try-it-out","title":"\ud83e\uddea Try It Out","text":"<p>Want to experiment? Just provide any image and see how it gets broken down into layers of color.</p>"},{"location":"#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>Getting Started</li> <li>API Reference</li> </ul>"},{"location":"#technologies-used","title":"\ud83d\udee0\ufe0f Technologies Used","text":"<ul> <li>Python 3.10+</li> <li>OpenCV</li> <li>NumPy</li> <li>Pandas</li> <li>MkDocs (for this documentation!)</li> </ul>"},{"location":"#contributing","title":"\ud83d\ude4c Contributing","text":"<p>Pull requests are welcome! Feel free to open an issue or suggest improvements.</p>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>MIT License \u00a9 Thomas Lentali</p>"},{"location":"getting-started/","title":"\ud83d\ude80 Getting Started","text":"<p>Welcome to Pycht \u2013 a tool for transforming images into colorful stencil layers using K-Means clustering. This guide will help you install, use, and customize Pycht step-by-step.</p>"},{"location":"getting-started/#installation","title":"\ud83d\udce6 Installation","text":"<p>Clone the repository and install dependencies:</p> <pre><code>git clone https://github.com/tlentali/pycht.git\ncd pycht\npip install -r requirements.txt\n</code></pre> <p>Alternatively, if you're using a virtual environment:</p> <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\npip install -r requirements.txt\n</code></pre>"},{"location":"getting-started/#usage-example","title":"\ud83d\uddbc\ufe0f Usage Example","text":"<p>Here\u2019s how to process an image and create stencils:</p> <pre><code>from pycht import Pycht\n\np = Pycht()\np.stencil(\"images/input.jpg\", nb_colors=4, output_path=\"output/\")\n</code></pre> <p>This will: - Load <code>input.jpg</code> - Cluster its colors into 4 dominant tones - Save:   - <code>output/</code>: the final image with clustered colors   - <code>stencil_1.png</code>, <code>stencil_2.png</code>, ...: one per color, with transparency</p>"},{"location":"getting-started/#parameters","title":"\u2699\ufe0f Parameters","text":"<ul> <li><code>input_img</code> (str): Path to the original image.</li> <li><code>output_path</code> (str): Path to save the clustered version of the image.</li> <li><code>nb_colors</code> (int): Number of color clusters (stencils) to generate.</li> </ul>"},{"location":"getting-started/#project-structure","title":"\ud83d\udcc1 Project Structure","text":"<pre><code>pycht/\n\u2502\n\u251c\u2500\u2500 clustering.py         # Handles K-Means color clustering\n\u251c\u2500\u2500 image_processing.py   # Image reading, reshaping, saving, display\n\u251c\u2500\u2500 pycht.py              # Main class combining everything\n\u251c\u2500\u2500 images/               # Your input/output folder (create it)\n\u2514\u2500\u2500 ...\n</code></pre>"},{"location":"getting-started/#try-it-with-your-own-image","title":"\ud83e\uddea Try It With Your Own Image","text":"<p>Put any <code>.jpg</code> or <code>.png</code> in the <code>images/</code> folder and run the script. The tool will output one clustered image and one stencil per color.</p>"},{"location":"getting-started/#customization-ideas","title":"\ud83d\udee0\ufe0f Customization Ideas","text":"<ul> <li>Try different numbers of <code>nb_colors</code> to control stencil complexity.</li> <li>Preprocess the image (e.g., resize or blur) before clustering.</li> <li>Adjust the clustering criteria in <code>clustering.py</code> if needed.</li> <li>Change output paths to organize your stencil layers better.</li> </ul>"},{"location":"getting-started/#next-steps","title":"\ud83d\udcda Next Steps","text":"<ul> <li>Browse the API Reference</li> <li>View example images (if available)</li> </ul>"},{"location":"getting-started/#need-help","title":"\u2753 Need Help?","text":"<p>Feel free to open an issue on GitHub if you run into trouble.</p> <p>Happy stenciling! \ud83c\udfa8</p>"},{"location":"reference/clustering/","title":"clustering.py","text":"<p>Module for performing color clustering on images using K-Means.</p>"},{"location":"reference/clustering/#pycht.clustering.Clustering","title":"<code>Clustering</code>","text":"<p>Perform K-Means clustering on image data to group similar colors.</p> Source code in <code>pycht/clustering.py</code> <pre><code>class Clustering:\n    \"\"\"\n    Perform K-Means clustering on image data to group similar colors.\n    \"\"\"\n\n    @staticmethod\n    def compute(Z: np.ndarray, nb_clusters: int):\n        \"\"\"\n        Apply K-Means clustering to the given data and return the clustered result.\n\n        Parameters:\n        ----------\n        Z : np.ndarray\n            Flattened image data (pixels) of shape (num_pixels, num_channels), dtype float32.\n        nb_clusters : int\n            The number of color clusters to form.\n\n        Returns:\n        -------\n        np.ndarray\n            The clustered image data where each pixel is replaced by the centroid of its cluster,\n            with dtype uint8 and the same shape as Z.\n        \"\"\"\n        _, label, center = cv2.kmeans(\n            Z,\n            nb_clusters,\n            None,\n            (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 10, 1),\n            10,\n            cv2.KMEANS_RANDOM_CENTERS,\n        )\n        center = np.uint8(center)  # Convert centroid colors to uint8\n        res = center[label.flatten()]  # Replace pixel values with their cluster center\n        return res\n</code></pre>"},{"location":"reference/clustering/#pycht.clustering.Clustering.compute","title":"<code>compute(Z, nb_clusters)</code>  <code>staticmethod</code>","text":"<p>Apply K-Means clustering to the given data and return the clustered result.</p>"},{"location":"reference/clustering/#pycht.clustering.Clustering.compute--parameters","title":"Parameters:","text":"<p>Z : np.ndarray     Flattened image data (pixels) of shape (num_pixels, num_channels), dtype float32. nb_clusters : int     The number of color clusters to form.</p>"},{"location":"reference/clustering/#pycht.clustering.Clustering.compute--returns","title":"Returns:","text":"<p>np.ndarray     The clustered image data where each pixel is replaced by the centroid of its cluster,     with dtype uint8 and the same shape as Z.</p> Source code in <code>pycht/clustering.py</code> <pre><code>@staticmethod\ndef compute(Z: np.ndarray, nb_clusters: int):\n    \"\"\"\n    Apply K-Means clustering to the given data and return the clustered result.\n\n    Parameters:\n    ----------\n    Z : np.ndarray\n        Flattened image data (pixels) of shape (num_pixels, num_channels), dtype float32.\n    nb_clusters : int\n        The number of color clusters to form.\n\n    Returns:\n    -------\n    np.ndarray\n        The clustered image data where each pixel is replaced by the centroid of its cluster,\n        with dtype uint8 and the same shape as Z.\n    \"\"\"\n    _, label, center = cv2.kmeans(\n        Z,\n        nb_clusters,\n        None,\n        (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 10, 1),\n        10,\n        cv2.KMEANS_RANDOM_CENTERS,\n    )\n    center = np.uint8(center)  # Convert centroid colors to uint8\n    res = center[label.flatten()]  # Replace pixel values with their cluster center\n    return res\n</code></pre>"},{"location":"reference/image_processing/","title":"image_processing.py","text":"<p>Image processing utilities for reading, displaying, reshaping, and performing color separation to generate final stencils from clustered images.</p>"},{"location":"reference/image_processing/#pycht.image_processing.ImageProcessing","title":"<code>ImageProcessing</code>","text":"<p>A collection of image processing methods for loading, transforming, displaying, and segmenting colors within an image.</p> Source code in <code>pycht/image_processing.py</code> <pre><code>class ImageProcessing:\n    \"\"\"\n    A collection of image processing methods for loading, transforming,\n    displaying, and segmenting colors within an image.\n    \"\"\"\n\n    def process(self, input_path: str) -&gt; np.ndarray:\n        \"\"\"\n        Load an image from disk, reshape it, and convert it to float32 format.\n\n        Parameters\n        ----------\n        input_path : str\n            Path to the input image file.\n\n        Returns\n        -------\n        np.ndarray\n            Flattened image array with dtype np.float32.\n        \"\"\"\n        img = self.read_image(input_path)\n        Z = self.reshape_image(img)\n        return self.convert_image_to_float(Z)\n\n    @staticmethod\n    def read_image(input_path: str) -&gt; np.ndarray:\n        \"\"\"\n        Load an image from the specified file path.\n\n        Parameters\n        ----------\n        input_path : str\n            Path to the input image file.\n\n        Returns\n        -------\n        np.ndarray\n            The loaded image as a NumPy array (BGR format).\n        \"\"\"\n        return cv2.imread(input_path)\n\n    @staticmethod\n    def reshape_image(image: np.ndarray) -&gt; np.ndarray:\n        \"\"\"\n        Reshape the image into a 2D array of pixels.\n\n        Parameters\n        ----------\n        image : np.ndarray\n            Original image array.\n\n        Returns\n        -------\n        np.ndarray\n            Reshaped array of shape (num_pixels, 3).\n        \"\"\"\n        return image.reshape((-1, 3))\n\n    @staticmethod\n    def write_image(res: np.ndarray, output_path: str) -&gt; None:\n        \"\"\"\n        Save an image to disk.\n\n        Parameters\n        ----------\n        res : np.ndarray\n            Image array to write.\n        output_path : str\n            Destination file path.\n        \"\"\"\n        cv2.imwrite(output_path, res)\n\n    @staticmethod\n    def convert_image_to_float(Z):\n        \"\"\"\n        Convert an image array to float32 format.\n\n        Parameters\n        ----------\n        Z : np.ndarray\n            Input image array.\n\n        Returns\n        -------\n        np.ndarray\n            Converted array with dtype np.float32.\n        \"\"\"\n        return np.float32(Z)\n\n    def color_separation(self, res, input_path: str, output_path: str) -&gt; None:\n        \"\"\"\n        Separate and isolate each color cluster from an image and save each cluster\n        as a separate stencil with transparency.\n\n        Parameters\n        ----------\n        res : np.ndarray\n            Clustered image data (flattened).\n        input_path : str\n            Path to the original image (for reshaping purposes).\n        output_path : str\n            Path to save the combined clustered image.\n        \"\"\"\n        img = self.read_image(input_path)\n        # separate differants colors\n        df = pd.DataFrame(res)\n        df.columns = [\"col1\", \"col2\", \"col3\"]\n        df[\"tot\"] = (\n            df[\"col1\"].astype(str) + df[\"col2\"].astype(str) + df[\"col3\"].astype(str)\n        )\n        df[\"tot\"].unique()\n        cmp = 1\n        for i in df[\"tot\"].unique():\n            df_annexe = df.copy()\n            df_annexe.loc[(df[\"tot\"] != i), \"col1\"] = 0\n            df_annexe.loc[(df[\"tot\"] != i), \"col2\"] = 0\n            df_annexe.loc[(df[\"tot\"] != i), \"col3\"] = 0\n\n            res_annexe = df_annexe[[\"col1\", \"col2\", \"col3\"]].values\n            res_annexe2 = res_annexe.reshape((img.shape))\n\n            # Create transparency mask: non-black areas become visible\n            color = (0, 0, 0)\n            mask = np.where((res_annexe2 == color).all(axis=2), 0, 255).astype(np.uint8)\n\n            # Convert to BGRA and add alpha channel\n            result = res_annexe2.copy()\n            result = cv2.cvtColor(result, cv2.COLOR_BGR2BGRA)\n            result[:, :, 3] = mask\n\n            cv2.imwrite(\"stencil_\" + str(cmp) + \".png\", result)\n            cmp += 1\n        res_2 = res.reshape((img.shape))\n        self.write_image(res_2, output_path + \"stencil_final.png\")\n</code></pre>"},{"location":"reference/image_processing/#pycht.image_processing.ImageProcessing.color_separation","title":"<code>color_separation(res, input_path, output_path)</code>","text":"<p>Separate and isolate each color cluster from an image and save each cluster as a separate stencil with transparency.</p>"},{"location":"reference/image_processing/#pycht.image_processing.ImageProcessing.color_separation--parameters","title":"Parameters","text":"<p>res : np.ndarray     Clustered image data (flattened). input_path : str     Path to the original image (for reshaping purposes). output_path : str     Path to save the combined clustered image.</p> Source code in <code>pycht/image_processing.py</code> <pre><code>def color_separation(self, res, input_path: str, output_path: str) -&gt; None:\n    \"\"\"\n    Separate and isolate each color cluster from an image and save each cluster\n    as a separate stencil with transparency.\n\n    Parameters\n    ----------\n    res : np.ndarray\n        Clustered image data (flattened).\n    input_path : str\n        Path to the original image (for reshaping purposes).\n    output_path : str\n        Path to save the combined clustered image.\n    \"\"\"\n    img = self.read_image(input_path)\n    # separate differants colors\n    df = pd.DataFrame(res)\n    df.columns = [\"col1\", \"col2\", \"col3\"]\n    df[\"tot\"] = (\n        df[\"col1\"].astype(str) + df[\"col2\"].astype(str) + df[\"col3\"].astype(str)\n    )\n    df[\"tot\"].unique()\n    cmp = 1\n    for i in df[\"tot\"].unique():\n        df_annexe = df.copy()\n        df_annexe.loc[(df[\"tot\"] != i), \"col1\"] = 0\n        df_annexe.loc[(df[\"tot\"] != i), \"col2\"] = 0\n        df_annexe.loc[(df[\"tot\"] != i), \"col3\"] = 0\n\n        res_annexe = df_annexe[[\"col1\", \"col2\", \"col3\"]].values\n        res_annexe2 = res_annexe.reshape((img.shape))\n\n        # Create transparency mask: non-black areas become visible\n        color = (0, 0, 0)\n        mask = np.where((res_annexe2 == color).all(axis=2), 0, 255).astype(np.uint8)\n\n        # Convert to BGRA and add alpha channel\n        result = res_annexe2.copy()\n        result = cv2.cvtColor(result, cv2.COLOR_BGR2BGRA)\n        result[:, :, 3] = mask\n\n        cv2.imwrite(\"stencil_\" + str(cmp) + \".png\", result)\n        cmp += 1\n    res_2 = res.reshape((img.shape))\n    self.write_image(res_2, output_path + \"stencil_final.png\")\n</code></pre>"},{"location":"reference/image_processing/#pycht.image_processing.ImageProcessing.convert_image_to_float","title":"<code>convert_image_to_float(Z)</code>  <code>staticmethod</code>","text":"<p>Convert an image array to float32 format.</p>"},{"location":"reference/image_processing/#pycht.image_processing.ImageProcessing.convert_image_to_float--parameters","title":"Parameters","text":"<p>Z : np.ndarray     Input image array.</p>"},{"location":"reference/image_processing/#pycht.image_processing.ImageProcessing.convert_image_to_float--returns","title":"Returns","text":"<p>np.ndarray     Converted array with dtype np.float32.</p> Source code in <code>pycht/image_processing.py</code> <pre><code>@staticmethod\ndef convert_image_to_float(Z):\n    \"\"\"\n    Convert an image array to float32 format.\n\n    Parameters\n    ----------\n    Z : np.ndarray\n        Input image array.\n\n    Returns\n    -------\n    np.ndarray\n        Converted array with dtype np.float32.\n    \"\"\"\n    return np.float32(Z)\n</code></pre>"},{"location":"reference/image_processing/#pycht.image_processing.ImageProcessing.process","title":"<code>process(input_path)</code>","text":"<p>Load an image from disk, reshape it, and convert it to float32 format.</p>"},{"location":"reference/image_processing/#pycht.image_processing.ImageProcessing.process--parameters","title":"Parameters","text":"<p>input_path : str     Path to the input image file.</p>"},{"location":"reference/image_processing/#pycht.image_processing.ImageProcessing.process--returns","title":"Returns","text":"<p>np.ndarray     Flattened image array with dtype np.float32.</p> Source code in <code>pycht/image_processing.py</code> <pre><code>def process(self, input_path: str) -&gt; np.ndarray:\n    \"\"\"\n    Load an image from disk, reshape it, and convert it to float32 format.\n\n    Parameters\n    ----------\n    input_path : str\n        Path to the input image file.\n\n    Returns\n    -------\n    np.ndarray\n        Flattened image array with dtype np.float32.\n    \"\"\"\n    img = self.read_image(input_path)\n    Z = self.reshape_image(img)\n    return self.convert_image_to_float(Z)\n</code></pre>"},{"location":"reference/image_processing/#pycht.image_processing.ImageProcessing.read_image","title":"<code>read_image(input_path)</code>  <code>staticmethod</code>","text":"<p>Load an image from the specified file path.</p>"},{"location":"reference/image_processing/#pycht.image_processing.ImageProcessing.read_image--parameters","title":"Parameters","text":"<p>input_path : str     Path to the input image file.</p>"},{"location":"reference/image_processing/#pycht.image_processing.ImageProcessing.read_image--returns","title":"Returns","text":"<p>np.ndarray     The loaded image as a NumPy array (BGR format).</p> Source code in <code>pycht/image_processing.py</code> <pre><code>@staticmethod\ndef read_image(input_path: str) -&gt; np.ndarray:\n    \"\"\"\n    Load an image from the specified file path.\n\n    Parameters\n    ----------\n    input_path : str\n        Path to the input image file.\n\n    Returns\n    -------\n    np.ndarray\n        The loaded image as a NumPy array (BGR format).\n    \"\"\"\n    return cv2.imread(input_path)\n</code></pre>"},{"location":"reference/image_processing/#pycht.image_processing.ImageProcessing.reshape_image","title":"<code>reshape_image(image)</code>  <code>staticmethod</code>","text":"<p>Reshape the image into a 2D array of pixels.</p>"},{"location":"reference/image_processing/#pycht.image_processing.ImageProcessing.reshape_image--parameters","title":"Parameters","text":"<p>image : np.ndarray     Original image array.</p>"},{"location":"reference/image_processing/#pycht.image_processing.ImageProcessing.reshape_image--returns","title":"Returns","text":"<p>np.ndarray     Reshaped array of shape (num_pixels, 3).</p> Source code in <code>pycht/image_processing.py</code> <pre><code>@staticmethod\ndef reshape_image(image: np.ndarray) -&gt; np.ndarray:\n    \"\"\"\n    Reshape the image into a 2D array of pixels.\n\n    Parameters\n    ----------\n    image : np.ndarray\n        Original image array.\n\n    Returns\n    -------\n    np.ndarray\n        Reshaped array of shape (num_pixels, 3).\n    \"\"\"\n    return image.reshape((-1, 3))\n</code></pre>"},{"location":"reference/image_processing/#pycht.image_processing.ImageProcessing.write_image","title":"<code>write_image(res, output_path)</code>  <code>staticmethod</code>","text":"<p>Save an image to disk.</p>"},{"location":"reference/image_processing/#pycht.image_processing.ImageProcessing.write_image--parameters","title":"Parameters","text":"<p>res : np.ndarray     Image array to write. output_path : str     Destination file path.</p> Source code in <code>pycht/image_processing.py</code> <pre><code>@staticmethod\ndef write_image(res: np.ndarray, output_path: str) -&gt; None:\n    \"\"\"\n    Save an image to disk.\n\n    Parameters\n    ----------\n    res : np.ndarray\n        Image array to write.\n    output_path : str\n        Destination file path.\n    \"\"\"\n    cv2.imwrite(output_path, res)\n</code></pre>"},{"location":"reference/pycht/","title":"pycht.py","text":"<p>Main project settings and execution logic.</p>"},{"location":"reference/pycht/#pycht.pycht.Pycht","title":"<code>Pycht</code>","text":"<p>Main interface for generating color-separated stencils from an input image.</p> <p>This class orchestrates the image processing and clustering steps by using the <code>ImageProcessing</code> and <code>Clustering</code> components.</p> Source code in <code>pycht/pycht.py</code> <pre><code>class Pycht:\n    \"\"\"\n    Main interface for generating color-separated stencils from an input image.\n\n    This class orchestrates the image processing and clustering steps by\n    using the `ImageProcessing` and `Clustering` components.\n    \"\"\"\n\n    def __init__(self) -&gt; None:\n        self.image_processing = ImageProcessing()\n        self.clustering = Clustering()\n\n    def stencil(self, input_img: str, nb_colors: int=4, output_path: str=\"./\") -&gt; None:\n        \"\"\"\n        Generate color stencils from an input image using K-Means clustering.\n\n        This method reads the image, clusters its colors, and saves each cluster\n        as a separate transparent stencil image.\n\n        Parameters\n        ----------\n        input_img : str\n            Path to the input image file.\n        output_path : str\n            Path to save the final clustered image.\n        nb_colors : int\n            Number of color clusters to segment the image into.\n        \"\"\"\n        return self.image_processing.color_separation(\n            self.clustering.compute(\n                self.image_processing.process(input_img), nb_colors\n            ),\n            input_img,\n            output_path,\n        )\n</code></pre>"},{"location":"reference/pycht/#pycht.pycht.Pycht.stencil","title":"<code>stencil(input_img, nb_colors=4, output_path='./')</code>","text":"<p>Generate color stencils from an input image using K-Means clustering.</p> <p>This method reads the image, clusters its colors, and saves each cluster as a separate transparent stencil image.</p>"},{"location":"reference/pycht/#pycht.pycht.Pycht.stencil--parameters","title":"Parameters","text":"<p>input_img : str     Path to the input image file. output_path : str     Path to save the final clustered image. nb_colors : int     Number of color clusters to segment the image into.</p> Source code in <code>pycht/pycht.py</code> <pre><code>def stencil(self, input_img: str, nb_colors: int=4, output_path: str=\"./\") -&gt; None:\n    \"\"\"\n    Generate color stencils from an input image using K-Means clustering.\n\n    This method reads the image, clusters its colors, and saves each cluster\n    as a separate transparent stencil image.\n\n    Parameters\n    ----------\n    input_img : str\n        Path to the input image file.\n    output_path : str\n        Path to save the final clustered image.\n    nb_colors : int\n        Number of color clusters to segment the image into.\n    \"\"\"\n    return self.image_processing.color_separation(\n        self.clustering.compute(\n            self.image_processing.process(input_img), nb_colors\n        ),\n        input_img,\n        output_path,\n    )\n</code></pre>"}]}